openapi: 3.0.0
info:
  title: My-Brand RESTful API
  version: 1.0.0
  description: My Brand is a capstone project By ATLP
servers:
  - url: http://localhost:5025/api
tags:
  - name: User
    description: Operations related to users
  - name: Message
    description: Operations related to messages
  - name: Blog
    description: Operations related to Blogs

paths:
  /login:
    post:
      summary: User login
      tags:
        - User
      description: Users with account can log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
        "400":
          description: Invalid login credentials
  /register:
    post:
      summary: Create user account
      tags:
        - User
      description: Non existing users can create a account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                verifyPassword:
                  type: string

      responses:
        "200":
          description: User registered successfully
        "400":
          description: Invalid registration data
  /users:
    get:
      summary: View all users
      tags:
        - User
      description: Authorized users can view lists of all users
      responses:
        "200":
          description: a list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"

        "500":
          description: Internal server error
        "401":
          description: "Not authorized"
  /users/{id}:
    get:
      summary: Find user By Id
      parameters:
        - name: id
          in: path
          description: id of User to return
          required: true
          schema:
            type: string
      tags:
        - User
      description: Authorized users can view information about a single user
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"
        "400":
          description: Invalid id supplied
        "404":
          description: User not found
        "401":
          description: Not authorized
    put:
      summary: Update user by id
      parameters:
        - name: id
          in: path
          description: id for user to update
          required: true
          schema:
            type: string
      tags:
        - User
      description: Authorized User can Edit users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
      responses:
        "200":
          description: success
        "404":
          description: user not found
        "401":
          description: Not authorized
        "500":
          description: Internal server error
    delete:
      summary: Delete user by id
      parameters:
        - name: id
          in: path
          description: id for user to delete
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        "404":
          description: user not found
        "200":
          description: success
        "403":
          description: access denied
        "500":
          description: Internal server error
        "401":
          description: Not authorized
  /messages:
    post:
      summary: send message
      tags:
        - Message
      description: Any one can send a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                message:
                  type: string
      responses:
        "201":
          description: created
        "500":
          description: Internal server error
    get:
      summary: View all Messages
      tags:
        - Message
      description: Authorized users can view lists of all messages
      responses:
        "200":
          description: a list of all messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/messages"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/messages"

        "500":
          description: Internal server error
        "401":
          description: "Not authorized"
  /messages/{id}:
    get:
      summary: Find message By Id
      parameters:
        - name: id
          in: path
          description: id of a message to return
          required: true
          schema:
            type: string
      tags:
        - Message
      description: Authorized users can view more info about a message
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/messages"
        "400":
          description: Invalid id supplied
        "404":
          description: message not found
        "401":
          description: Not authorized
    delete:
      summary: Delete message by id
      parameters:
        - name: id
          in: path
          description: id for message to delete
          required: true
          schema:
            type: string
      tags:
        - Message
      responses:
        "404":
          description: message not found
        "200":
          description: success
        "403":
          description: access denied
        "500":
          description: Internal server error
        "401":
          description: Not authorized
  /blog:
    post:
      summary: Create a new Blog
      tags:
        - Blog
      description: Authorized users can create a blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: created
        "500":
          description: Internal server error
        "401":
          description: Unauthorized
  /blogs:
    get:
      summary: View all Blogs
      tags:
        - Blog
      description: Any one can view blogs
      responses:
        "200":
          description: a list of all Blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"

        "500":
          description: Internal server error
        "401":
          description: "Not authorized"
  /blogs/{id}:
    get:
      summary: Find blog By Id
      parameters:
        - name: id
          in: path
          description: id of a a blog to return
          required: true
          schema:
            type: string
      tags:
        - Blog
      description: any one can read a blog
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
        "400":
          description: Invalid id supplied
        "404":
          description: Blog not found
    put:
      summary: Update Blog by id
      parameters:
        - name: id
          in: path
          description: id for blog to update
          required: true
          schema:
            type: string
      tags:
        - Blog
      description: Authorized User can Edit Blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                author:
                  type: string
      responses:
        "200":
          description: success
        "404":
          description: Blog not found
        "401":
          description: Not authorized
        "500":
          description: Internal server error
    delete:
      summary: Delete Blog  by id
      parameters:
        - name: id
          in: path
          description: id for blog to delete
          required: true
          schema:
            type: string
      tags:
        - Blog
      responses:
        "404":
          description: blog not found
        "200":
          description: success
        "403":
          description: access denied
        "500":
          description: Internal server error
        "401":
          description: Not authorized
  /comments/{id}:
    put:
      summary: Add new comment
      parameters:
        - name: id
          in: path
          description: id for blog to comment on
          required: true
          schema:
            type: string
      tags:
        - Blog
      description: Any one can comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                content:
                  type: string
      responses:
        "200":
          description: success
        "404":
          description: Blog not found
        "401":
          description: Not authorized
        "500":
          description: Internal server error
components:
  schemas:
    Users:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          example: "65e5f00aeaee631f21c3c92e"
        name:
          type: string
          example: Kevin Rwema
        email:
          type: string
          example: kevinrwema@gmail.com
        role:
          type: string
          example: superadmin
        createdAt:
          type: string
          description: account created at
        updatedAt:
          type: string
          description: account last updated at
      xml:
        name: Users
    messages:
      required:
        - fullName
        - email
        - content
      type: object
      properties:
        id:
          type: string
          example: "65e5f00aeaee631f21c3c92e"
        fullName:
          type: string
          example: Kevin Rwema
        email:
          type: string
          example: kevinrwema@gmail.com
        content:
          type: string
          example: Hello there
    Blog:
      required:
        - title
        - author
        - content
      type: object
      properties:
        id:
          type: string
          example: "65e5f00aeaee631f21c3c92e"
        title:
          type: string
          example: How to code
        author:
          type: string
          example: John Doe
        content:
          type: string
          example: Lorem ipsum dolor sit amet
        comments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              email:
                type: string
              content:
                type: string
          example:
            - id: 123
              name: Anonymous
              email: kevinrwema@gmail.com
              content: Yay, I like it!
            - id: 123
              name: Andela
              email: Andela@gmail.com
              content: Congrats, Kevin!!
